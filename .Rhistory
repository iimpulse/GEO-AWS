devtools::install_github("rstudio/shinyapps", force=TRUE)
runApp()
runApp()
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
runApp()
runApp()
runApp()
require(shinydashboard)
runApp()
rsconnect::deployApp(appFileManifest = “manifest.txt”)
rsconnect::deployApp(appFileManifest = "manifest.txt")
rsconnect::deployApp(appFileManifest = "manifest.txt")
runApp()
install.packages(c("devtools", "plotly", "R.utils", "sp", "swirl", "testthat"))
session_info()
rsconnect::deployApp(appFileManifest = "manifest.txt")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp(appFileManifest="manifest.txt")
runApp()
library(shinydashboard)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
library(shiny)
runApp()
library(shinydashboard)
runApp()
library(devtools)
devtools::document()
devtools::document()
devtools::use_build_ignore(c("1200x592.png", "jasmine_dumas_user2016_poster_update.pdf", ))
devtools::use_build_ignore(c("1200x592.png", "jasmine_dumas_user2016_poster_update.pdf", "jasmine_dumas_user2016_poster_update.pptx", "jasmine_dumas_user2016_poster.pptx"))
use_build_ignore(".travis.yml")
cat("Platforms updated .../n")
cat("Platforms updated ...\n")
?source
source("inst/shiny-apps/shinyGEO/platforms/geo-platform-update.sh")
?system
?load
system("inst/shiny-apps/shinyGEO/platforms/geo-platform-update.sh", intern=T)
system("inst/shiny-apps/shinyGEO/platforms/geo-platform-update.sh", intern=F)
system("inst/shiny-apps/shinyGEO/series/geo-series-update.sh")
install.packages("httr")
install.packages("httr")
library(httr)
data <- httr::GET("https://www.ncbi.nlm.nih.gov/geo/browse/")
data
system("echo "Update GEO data..."
data=$(curl --silent "https://www.ncbi.nlm.nih.gov/geo/browse/" | grep "total_count")
")
system("inst/shiny-apps/shinyGEO/series/geo-series-update.sh")
q()
source('~/Desktop/R-directory/shinyGEO/R/runshinyGEO.R')
runshinyGEO()
runshinyGEO()
appDir <- system.file("shiny-apps", "shinyGEO", package = "shinyGEO")
library(limma)
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
q()
library(ggplot2)
library(devtools)
session_info()
BiocInstaller::biocLite(c("limma", "affy"))
devtools::document()
use_build_ignore("rsconnect")
use_build_ignore("ui.dashboard.body.R~master")
library(shinyGEO)
runshinyGEO()
runshinyGEO()
Q
library(shinyGEO)
runshinyGEO()
getwd()
home <- getwd()
setwd("/home/user")
setwd("\home\user")
data = system("curl --silent 'https://www.ncbi.nlm.nih.gov/geo/browse/' | grep 'total_count'")
library(RCurl)
library(httr)
?GET
?grep
r = GET(url = 'https://www.ncbi.nlm.nih.gov/geo/browse/')
grep('total_count', r)
r
headers(r)
content(r, 'total_count')
content(r, 'text')
grep('total_count', content(r, 'text'))
r
headers(r)
r$`content-type`
r = curl_fetch_memory('https://www.ncbi.nlm.nih.gov/geo/browse/')
library(curl)
r = curl_fetch_memory('https://www.ncbi.nlm.nih.gov/geo/browse/')
r
?getURL
r = getURL('https://www.ncbi.nlm.nih.gov/geo/browse/')
r
r_httr = GET(url = 'https://www.ncbi.nlm.nih.gov/geo/browse/')
r_httr
r_RCurl = getURL('https://www.ncbi.nlm.nih.gov/geo/browse/')
r_RCurl
str(r_httr)
r_httr$`content-type`
str(content(r_httr))
grep('count', r_httr)
r_httr$request$headers
content_type_json(r_httr)
content(r_httr)
c = content(r_httr)
c[2]
c$node
c
grep('count', c)
print(c)
str(c)
c[1:2]
attr(c)
grep('total_count', content(r_httr))
library(RCurl)
r_RCurl = getURL('https://www.ncbi.nlm.nih.gov/geo/browse/')
r_RCurl
grep("total_count", r_RCurl)
grep("total_count", r_RCurl, value = T)
r_httr = GET(url = 'https://www.ncbi.nlm.nih.gov/geo/browse/')
library(httr)
r_httr
grep('total_count', content(r_httr))
grep("total_count", r_RCurl, value = T)
grep("^nation", r_RCurl, value = T)
grep("^national", r_RCurl, value = T)
grep("database", r_RCurl, value = T)
class(r_RCurl)
?xml2
?XML
library(XML)
parsed <- htmlParse(r_RCurl)
parsed
top_table <- readHTMLTable(parsed)[[1]]
top_table
View(top_table)
str(parsed)
class(parsed)
View(r_httr)
content(r_httr)
content(r_httr)[[1]]
content(r_httr)[1]
?system
data = grep("total_count", getURL('https://www.ncbi.nlm.nih.gov/geo/browse/'), value = T)
data
data = grep("[0-9] series", getURL('https://www.ncbi.nlm.nih.gov/geo/browse/'), value = T)
data
data = grep("count", getURL('https://www.ncbi.nlm.nih.gov/geo/browse/'), value = T)
data
grep("count", readHTMLTable(data))
grep("count", readHTMLTable(data), value = T)
grep("count", readHTMLList(data), value = T)
library(rvest)
series_count <- html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count <- read_html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count  %>%
html_node("count") %>%
html_text() %>%
as.numeric()
series_count  %>%
html_node("#count") %>%
html_text() %>%
as.numeric()
series_count  %>%
html_nodes("#count") %>%
html_text() %>%
as.numeric()
series_count  %>%
html_nodes("//*[(@id = 'count')]") %>%
html_text() %>%
as.numeric()
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.numeric()
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]")
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text()
?gsub
count = gsub("series", "", series_count)
count
series_count <- read_html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text()
count = gsub("series", "", series_count)
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
count = gsub("series", "", series_count)
count
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character() %>%
gsub("series", "") %>%
as.numeric()
series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
str(series_count)
series$doc
series$node
count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
as.numeric(gsub("series", "", count) )
series_count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
series_count <- as.numeric(gsub("series", "", count) )
?ceiling
as.integer(ceiling(series_count/5000.0))
cat("Getting GEO Data...")
cat("Using count = ", series_count)
?for
()
?loop
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=", series_count, "&display=5000")
url
5 <= 10
library(readr)
data2 <- read_csv("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=1&display=5000")
View(data2)
cat("Getting GEO Data...\n")
series_count = 5
series <- data.frame()
for(i <= series_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=", i, "&display=5000")
series_data <- read_csv(url)
series <- rbind(series, series_data)
}
}
for(i in series_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=", i, "&display=5000")
series_data <- read_csv(url)
series <- rbind(series, series_data)
}
}
View(series)
series_count
series_count <- read_html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
series_count <- as.numeric(gsub("series", "", count) )
series_count <- as.integer(ceiling(series_count/5000.0))
cat("Getting GEO Data...\n")
cat("Using count = ", series_count, "\n")
series <- data.frame()
series_count
for(i in 1:series_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=", i, "&display=5000")
series_data <- read_csv(url)
series <- rbind(series, series_data)
}
}
rm("data2")
rm("top_data")
rm("top_table")
View(series)
?rbind
series_count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
series_count <- as.numeric(gsub("series", "", series_count) )
# there are only 5000 views on each page - this get the amount of pages to loop
series_count <- as.integer(ceiling(series_count/5000.0))
series_count <- read_html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
series_count <- as.numeric(gsub("series", "", series_count) )
# there are only 5000 views on each page - this get the amount of pages to loop
series_count <- as.integer(ceiling(series_count/5000.0))
series_count
?write_csv
getwd()
?load_all
library(devtools)
load_all
?load_all
View(series)
write_csv(series, "series.csv")
cat("Finished update...data saved to -> series.csv\n")
series = read.table("series.csv", header = TRUE, sep = ",")
View(series)
g = grep("Expression profiling by array", series$Series.Type)
series = read_csv("series.csv")
View(series)
g = grep("Expression profiling by array", series$`Series Type`)
series = series[g,]
View(series)
series.accession = as.character(series$Accession)
series.description = as.character(series$Title)
o = order(series.accession)
series.accession = series.accession[o]
series.description = series.description[o]
save(series.accession, series.description, file = "series.RData")
getwd()
series_count <- read_html('https://www.ncbi.nlm.nih.gov/geo/browse/')
series_count <- series_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
series_count <- as.numeric(gsub("series", "", series_count) )
series_count <- as.integer(ceiling(series_count/5000.0))
cat("Getting GEO Data...\n")
cat("Using count = ", series_count, "\n")
# this will hold the binded series meta data
series <- data.frame()
for(i in 1:series_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=series&zsort=date&mode=csv&page=", i, "&display=5000")
series_data <- read_csv(url)
series <- rbind(series, series_data)
}
}
write_csv(series, "inst/extdata/series.csv")
series = read_csv("inst/extdata/series.csv")
g = grep("Expression profiling by array", series$`Series Type`)
series = series[g,]
series.accession = as.character(series$Accession)
series.description = as.character(series$Title)
o = order(series.accession)
series.accession = series.accession[o]
series.description = series.description[o]
save(series.accession, series.description, file = "data/series.RData")
platform_count <- read_html("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
platform_count <- platform_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
platform_count <- as.numeric(gsub("series", "", platform_count) )
platform_count
platform_count <- as.numeric(gsub("platforms", "", platform_count) )
platform_count <- read_html("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
platform_count <- platform_count  %>%
html_nodes(xpath="//*[(@id = 'count')]") %>%
html_text() %>%
as.character()
platform_count <- as.numeric(gsub("platforms", "", platform_count) )
platform_count
platform_count <- as.integer(ceiling(platform_count/5000.0))
platform_count
cat("Using count = ", platform_count, "\n")
platform <- data.frame()
for(i in 1:platform_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms&zsort=date&mode=csv&page=", i, "&display=5000")
platform_data <- read_csv(url)
series <- rbind(platform, platform_data)
}
}
# save raw data in external folder
write_csv(platform, "inst/extdata/platform.csv")
cat("Finished update...raw data saved to -> inst/extdata/platform.csv")
platform <- data.frame()
for(i in 1:platform_count) {
if(i != 1) {
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms&zsort=date&mode=csv&page=", i, "&display=5000")
platform_data <- read_csv(url)
platform <- rbind(platform, platform_data)
}
}
# save raw data in external folder
write_csv(platform, "inst/extdata/platform.csv")
cat("Finished update...raw data saved to -> inst/extdata/platform.csv")
platforms = read_csv("inst/extdata/platform.csv")
g1 = grep("oligonucleotide", platforms$Technology)
g2 = grep("spotted DNA", platforms$Technology)
g = c(g1,g2)
platforms = platforms[g,]
platforms.accession = as.character(platforms$Accession)
platforms.description =  paste0(platforms$Title, " (", platforms$Data.Rows, " probes)")
View(platforms)
platforms.description =  paste0(platforms$Title, " (", platforms$`Data Rows`, " probes)")
o = order(platforms.accession)
platforms.accession = platforms.accession[o]
platforms.description = platforms.description[o]
save(platforms.accession, platforms.description, file = "data/platforms.RData")
devtools::document()
runshinyGEO()
load("data/series.RData")
load("data/series.RData")
appDir <- system.file("shiny-apps", "shinyGEO", package = "shinyGEO")
appDir
load("~/data/series.RData")
getwd()
paste0(getwd(), "data/series.RData")
paste0(getwd(), "/data/series.RData")
load( paste0(getwd(), "/data/series.RData") )
runshinyGEO()
appDir
seriesDir <- system.file("data", "series.RData")
seriesDir
?system.file
seriesDir <- system.file("data", "series.RData", package = "shinyGEO")
seriesDir
load(seriesDir)
runshinyGEO()
Q
tools::checkRdaFiles()
?checkRdaFiles?
?checkRdaFiles
tools::checkRdaFiles("data/series.RData")
tools::checkRdaFiles("data/platforms.RData")
tools::resaveRdaFiles("data/series.RData")
tools::resaveRdaFiles("data/platforms.RData")
devtools::document()
devtools::use_build_ignore("inst/extdata/series.csv")
devtools::use_build_ignore("inst/extdata/platform.csv")
library(magrittr)
document()
devtools::use_build_ignore("inst/shiny-apps/shinyGEO/platforms")
devtools::use_build_ignore("inst/shiny-apps/shinyGEO/series")
document()
devtools::use_build_ignore("inst/shiny-apps/shinyGEO/RData")
devtools::use_build_ignore("inst/shiny-apps/shinyGEO/series/series.RData")
devtools::use_build_ignore("inst/shiny-apps/shinyGEO/series/platforms.RData")
?"%>%"
devtools::document()
?read_html
library(rvest)
?read_html
document()
document()
rm(list=ls())
session_info()
use_build_ignore("cran-comments.md")
rm("platforms.accession")
rm(platforms.accession)
load("~/Desktop/R-directory/shinyGEO/data/platforms.RData")
load("~/Desktop/R-directory/shinyGEO/data/series.RData")
?devtools::load_data
?devtools::load_all
citation("shinyGEO")
rm(ls=lsit())
rm(ls=list())
rm(list=ls())
load_data()
load_data("shinyGEO")
library("shinyGEO", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
load_data("shinyGEO")
runshinyGEO()
Q
runshinyGEO()
load("~/Desktop/R-directory/shinyGEO/data/series.RData")
document()
document()
document()
document()
document()
q()
shiny::runApp('inst/shiny-apps/shinyGEO')
runshinyGEO()
library(shinyGEO)
session_info()
q()
sessionInfo()
update.packages()
library(devtools)
session_info()
devtools::use_code_of_conduct()
library(shinyGEO)
runshinyGEO()
Q
library(shinyGEO)
q()
devtools::document()
devtools::document()
devtools::document()
q()
